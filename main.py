# main.py
import logging
import random
import datetime
import json
import asyncio
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)

BOT_TOKEN = "8215048455:AAHo0yQazQdG93cvlDuhjn67VT-OUt7I9VM"  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TASKS = [
    "–Ω–∞–ø–∏—Å–∞—Ç—å 10 —Å–æ–æ–±—â–µ–Ω–∏–π", "–Ω–∞–ø–∏—Å–∞—Ç—å 20 —Å–æ–æ–±—â–µ–Ω–∏–π", "–Ω–∞–ø–∏—Å–∞—Ç—å 30 —Å–æ–æ–±—â–µ–Ω–∏–π",
    "–Ω–∞–ø–∏—Å–∞—Ç—å 40 —Å–æ–æ–±—â–µ–Ω–∏–π", "–Ω–∞–ø–∏—Å–∞—Ç—å 50 —Å–æ–æ–±—â–µ–Ω–∏–π", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
    "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ (–∫—Ä—É–∂–æ–∫)", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é",
    "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ >50 —Å–∏–º–≤–æ–ª–æ–≤",
    "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ >100 —Å–∏–º–≤–æ–ª–æ–≤", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–∏—Ñ–∫—É",
    "–ø–æ–∂–µ–ª–∞—Ç—å –¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞", "–ø–æ–∂–µ–ª–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏"
]

MORNING_PHRASES = ["–¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–µ—á–∫–æ", "–¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–µ—á–∫–∞"]
NIGHT_PHRASES = ["—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏", "—Å–ø–æ–∫", "—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∫–∏", "—Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤"]

STATE_FILE = "state.json"

def load_state():
    try:
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_state(state):
    with open(STATE_FILE, "w", encoding="utf-8") as f:
        json.dump(state, f, ensure_ascii=False, indent=2)

def start_fire(chat_id, state):
    state[str(chat_id)] = {
        "started": datetime.date.today().isoformat(),
        "day": 0,
        "status": "üî•",
        "missed": 0,
        "tasks": [],
        "last_date": None,
        "today_done": {"me": False, "them": False},
        "message_count": {"me": 0, "them": 0}
    }

def next_day(chat_id, state):
    info = state[str(chat_id)]
    info["day"] += 1
    info["tasks"] = random.sample(TASKS, 3)
    info["today_done"] = {"me": False, "them": False}
    info["message_count"] = {"me": 0, "them": 0}

def check_failure(chat_id, state):
    info = state[str(chat_id)]
    if info["missed"] >= 3:
        info["status"] = "üò≠"

async def send_new_tasks(context: ContextTypes.DEFAULT_TYPE):
    state = load_state()
    today = datetime.date.today().isoformat()
    for chat_id, info in state.items():
        if info["status"] == "üò≠":
            continue
        if info.get("last_date") != today:
            if info["day"] > 0 and (not info["today_done"]["me"] or not info["today_done"]["them"]):
                info["missed"] += 1
                if info["status"] == "üî•":
                    info["status"] = "üßä"
            check_failure(chat_id, state)
            next_day(chat_id, state)
            info["last_date"] = today
            tasks = info["tasks"]
            text = (
                f"–ø—Ä–∏–≤–µ—Ç! —è - –û–≥–æ–Ω–µ–∫ –ú–∞—Ç–≤–µ—è, –æ–±—â–∞–π—Å—è —Å –º–∞—Ç–≤–µ–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã —è –ø—Ä–æ–¥–æ–ª–∂–∞–ª –≥–æ—Ä–µ—Ç—å.\n\n"
                f"–∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {', '.join(tasks)}\n\n"
                "–µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∏–∑ –≤–∞—Å –¥–≤–æ–∏—Ö –Ω–µ —Å–¥–µ–ª–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ, —Ç–æ –æ–≥–æ–Ω–µ–∫ —Å—Ç–∞–Ω–µ—Ç —Å–µ—Ä—ã–º, "
                "–µ—Å–ª–∏ 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è, –æ–≥–æ–Ω–µ–∫ –ø–æ—Ç—É—Ö–Ω–µ—Ç."
            )
            await context.bot.send_message(int(chat_id), text)
    save_state(state)

def task_completed(task, msg, info, who):
    if task.startswith("–Ω–∞–ø–∏—Å–∞—Ç—å"):
        needed = int(task.split()[1])
        return info["message_count"][who] >= needed
    if task == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" and msg.voice:
        return True
    if task == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ (–∫—Ä—É–∂–æ–∫)" and msg.video_note:
        return True
    if task == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é" and msg.location:
        return True
    if task == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ" and msg.video:
        return True
    if task == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ" and msg.photo:
        return True
    if task == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ >50 —Å–∏–º–≤–æ–ª–æ–≤" and msg.text and len(msg.text) > 50:
        return True
    if task == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ >100 —Å–∏–º–≤–æ–ª–æ–≤" and msg.text and len(msg.text) > 100:
        return True
    if task == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä" and msg.sticker:
        return True
    if task == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–∏—Ñ–∫—É" and msg.animation:
        return True
    if task == "–ø–æ–∂–µ–ª–∞—Ç—å –¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞" and msg.text and any(p in msg.text.lower() for p in MORNING_PHRASES):
        return True
    if task == "–ø–æ–∂–µ–ª–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏" and msg.text and any(p in msg.text.lower() for p in NIGHT_PHRASES):
        return True
    return False

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg:
        return
    chat_id = str(msg.chat_id)
    sender_id = msg.from_user.id
    state = load_state()
    info = state.get(chat_id)

    if not info:
        start_fire(chat_id, state)
        info = state[chat_id]
        await msg.reply_text(
            "–ø—Ä–∏–≤–µ—Ç! —è - –û–≥–æ–Ω–µ–∫ –ú–∞—Ç–≤–µ—è, –æ–±—â–∞–π—Å—è —Å –º–∞—Ç–≤–µ–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã —è –ø—Ä–æ–¥–æ–ª–∂–∞–ª –≥–æ—Ä–µ—Ç—å.\n\n"
            "–∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: (–±—É–¥—É—Ç –≤—ã–¥–∞–Ω—ã –≤ –ø–æ–ª–Ω–æ—á—å)\n\n"
            "–µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∏–∑ –≤–∞—Å –¥–≤–æ–∏—Ö –Ω–µ —Å–¥–µ–ª–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ, —Ç–æ –æ–≥–æ–Ω–µ–∫ —Å—Ç–∞–Ω–µ—Ç —Å–µ—Ä—ã–º, "
            "–µ—Å–ª–∏ 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è, –æ–≥–æ–Ω–µ–∫ –ø–æ—Ç—É—Ö–Ω–µ—Ç."
        )
        save_state(state)
        return

    # !–æ–≥–æ–Ω–µ–∫
    if msg.text and msg.text.strip() == "!–æ–≥–æ–Ω–µ–∫":
        if info["status"] == "üò≠":
            await msg.reply_text("–û–≥–æ–Ω—ë–∫ –ø–æ—Ç—É—Ö üò≠")
            return
        tasks = info.get("tasks", [])
        done_me = info["today_done"]["me"]
        done_them = info["today_done"]["them"]
        await msg.reply_text(
            f"üî• —Å–µ—Ä–∏—è –æ–≥–æ–Ω—å–∫–∞\n"
            f"—Å—Ç–∞—Ç—É—Å: {info['status']}\n"
            f"–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {info['started']}\n"
            f"–∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {', '.join(tasks)}\n"
            f"–≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {1 if done_me else 0}/2 (–≤—ã), {1 if done_them else 0}/2 (—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫)"
        )
        return

    who = "me" if sender_id == context.bot.id else "them"
    info["message_count"][who] += 1

    for task in info.get("tasks", []):
        if task_completed(task, msg, info, who):
            info["today_done"][who] = True

    state[chat_id] = info
    save_state(state)

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(MessageHandler(filters.ALL, handle_message))

    # –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è job_queue —è–≤–Ω–æ
    job_queue = app.job_queue
    job_queue.run_daily(
        send_new_tasks,
        time=datetime.time(hour=0, minute=0, tzinfo=datetime.timezone(datetime.timedelta(hours=3)))
    )

    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await app.updater.idle()

if __name__ == "__main__":
    asyncio.run(main())
