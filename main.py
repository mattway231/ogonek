import os
import asyncio
import random
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiohttp import web

BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID"))
MATTHEW = int(os.getenv("MATTHEW"))
YANA = int(os.getenv("YANA"))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

fire_data = {
    "name": "–û–≥–æ–Ω—ë–∫",
    "series": 0,
    "start_date": None,
    "status": "üî•",
    "tasks": [],
    "done": {MATTHEW: set(), YANA: set()},
    "frozen_days": 0,
}

task_templates = [
    "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å 10 —Å–æ–æ–±—â–µ–Ω–∏–π",
    "–û—Ç–ø—Ä–∞–≤–∏—Ç—å 20 —Å–æ–æ–±—â–µ–Ω–∏–π", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å 30 —Å–æ–æ–±—â–µ–Ω–∏–π", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å 40 —Å–æ–æ–±—â–µ–Ω–∏–π",
    "–û—Ç–ø—Ä–∞–≤–∏—Ç—å 50 —Å–æ–æ–±—â–µ–Ω–∏–π", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å 60 —Å–æ–æ–±—â–µ–Ω–∏–π",
    "–ü–æ–∂–µ–ª–∞—Ç—å –¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞", "–ü–æ–∂–µ–ª–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏",
    "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
    "–ù–∞–ø–∏—Å–∞—Ç—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (100+ —Å–∏–º–≤–æ–ª–æ–≤)"
]

def is_morning(text): return any(w in text.lower() for w in ["–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "–¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–µ—á–∫–æ", "–¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–µ—á–∫–∞"])
def is_night(text): return any(w in text.lower() for w in ["—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏", "—Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤", "—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∫–∏"])

def pick_tasks(): return random.sample(task_templates, 3)

async def send_tasks():
    fire_data["tasks"] = pick_tasks()
    fire_data["done"] = {MATTHEW: set(), YANA: set()}
    fire_data["status"] = "üî•"
    now = datetime.now().strftime("%d.%m.%Y")
    text = f"<b>{fire_data['status']} {fire_data['name']}</b>\n"
    if fire_data["series"]: text += f"–°–µ—Ä–∏—è: {fire_data['series']}üî• —Å {fire_data['start_date']}\n"
    else: text += "–°–µ—Ä–∏—è: 0üî• (–æ–∂–∏–¥–∞–µ—Ç—Å—è –Ω–∞—á–∞–ª–æ)\n"
    text += f"üìÖ –ó–∞–¥–∞–Ω–∏—è –Ω–∞ {now}:\n\n"
    for t in fire_data["tasks"]: text += f"‚¨ú {t}\n"
    msg = await bot.send_message(chat_id=GROUP_ID, text=text)
    try: await bot.unpin_all_chat_messages(chat_id=GROUP_ID)
    except: pass
    await msg.pin()

async def check_series():
    done_all = all(len(fire_data["done"][uid]) == 3 for uid in (MATTHEW, YANA))
    if done_all:
        if fire_data["series"] == 0:
            fire_data["start_date"] = datetime.now().strftime("%d.%m.%Y")
        fire_data["series"] += 1
        fire_data["frozen_days"] = 0
    else:
        fire_data["frozen_days"] += 1
        fire_data["status"] = "üßä"
        missing = []
        for uid in (MATTHEW, YANA):
            if len(fire_data["done"][uid]) < 3:
                missing.append("–ú–∞—Ç–≤–µ–π–∫–∞" if uid == MATTHEW else "–Ø–Ω–æ—á–∫–∞")
        await bot.send_message(GROUP_ID, f"‚ö†Ô∏è {' –∏ '.join(missing)}, –≤—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è.")
        if fire_data["frozen_days"] >= 3:
            fire_data.update({"series": 0, "start_date": None, "status": "üò≠"})
            await bot.send_message(GROUP_ID, "üíî –û–≥–æ–Ω—ë–∫ –ø–æ—Ç—É—Ö. –°–µ—Ä–∏—è –æ–±–Ω—É–ª–∏–ª–∞—Å—å.")

async def midnight_loop():
    while True:
        now = datetime.now()
        next_run = (now + timedelta(days=1)).replace(hour=0, minute=0, second=0)
        await asyncio.sleep((next_run - now).total_seconds())
        await check_series()
        await send_tasks()

@dp.message_handler(commands=["start"])
async def start_cmd(m: types.Message):
    if m.chat.id == GROUP_ID:
        await m.reply("üëã –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

@dp.message_handler(lambda m: m.text and m.text.startswith("."))
async def commands(m: types.Message):
    if m.chat.id != GROUP_ID: return
    cmd = m.text.lower()
    if cmd == ".–æ–≥–æ–Ω–µ–∫":
        await m.reply(f"{fire_data['status']} –°–µ—Ä–∏—è: {fire_data['series']}üî•")
    elif cmd == ".–∏–º—è":
        await m.reply("–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –∏–º—è –æ–≥–æ–Ω—å–∫–∞")
    elif cmd == ".–∑–∞–¥–∞–Ω–∏—è":
        lines = []
        for i, t in enumerate(fire_data["tasks"]):
            count = sum(1 for uid in (MATTHEW, YANA) if i in fire_data["done"][uid])
            lines.append(f"{'‚òëÔ∏è' if count==2 else '‚¨ú'} {t} ‚Äî {count}/2")
        await m.reply("\n".join(lines))
    elif cmd == ".—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        matt = len(fire_data["done"][MATTHEW])
        yana = len(fire_data["done"][YANA])
        await m.reply(f"{fire_data['status']} {fire_data['name']}\n–ú–∞—Ç–≤–µ–π–∫–∞: {matt}/3\n–Ø–Ω–æ—á–∫–∞: {yana}/3")

@dp.message_handler()
async def track(m: types.Message):
    if m.chat.id != GROUP_ID or m.from_user.id not in (MATTHEW, YANA): return
    uid = m.from_user.id
    tasks = fire_data["tasks"]
    done = fire_data["done"][uid]
    def complete(i):
        if i not in done:
            done.add(i)
            who = "–ú–∞—Ç–≤–µ–π–∫–∞" if uid == MATTHEW else "–Ø–Ω–æ—á–∫–∞"
            asyncio.create_task(bot.send_message(GROUP_ID, f"‚úÖ {who} –≤—ã–ø–æ–ª–Ω–∏–ª: {tasks[i]} ({len(done)}/3)"))
    for i, t in enumerate(tasks):
        if t == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä" and m.sticker: complete(i)
        elif t == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ" and m.video: complete(i)
        elif t.startswith("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ") and m.voice: complete(i)
        elif t.startswith("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ") and m.photo: complete(i)
        elif t.startswith("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ") and m.location: complete(i)
        elif t.startswith("–ü–æ–∂–µ–ª–∞—Ç—å –¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞") and m.text and is_morning(m.text): complete(i)
        elif t.startswith("–ü–æ–∂–µ–ª–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏") and m.text and is_night(m.text): complete(i)
        elif t.startswith("–ù–∞–ø–∏—Å–∞—Ç—å –¥–ª–∏–Ω–Ω–æ–µ") and m.text and len(m.text) > 100: complete(i)
        elif "—Å–æ–æ–±—â–µ–Ω–∏–π" in t:
            if not hasattr(dp, "msg_count"): dp.msg_count = {}
            dp.msg_count.setdefault((uid, i), 0)
            dp.msg_count[(uid, i)] += 1
            if dp.msg_count[(uid, i)] >= int(t.split()[1]): complete(i)

# Web
routes = web.RouteTableDef()

@routes.get("/")
async def index(request): return web.FileResponse("docs/index.html")

@routes.get("/background")
async def background(request): return web.HTTPFound(location=os.getenv("BACKGROUND"))

@routes.get("/fonts/{name}")
async def fonts(request): return web.FileResponse(f"docs/fonts/{request.match_info['name']}")

@routes.get("/api/state")
async def api(request):
    tasks = []
    for i, name in enumerate(fire_data["tasks"]):
        count = sum(1 for uid in (MATTHEW, YANA) if i in fire_data["done"][uid])
        tasks.append({"name": name, "count": count})
    return web.json_response({
        "name": fire_data["name"],
        "series": fire_data["series"],
        "start_date": fire_data["start_date"],
        "status": fire_data["status"],
        "tasks": tasks
    })

def start_web(): app = web.Application(); app.add_routes(routes); return app

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    loop = asyncio.get_event_loop()
    loop.create_task(midnight_loop())
    web_app = start_web()
    loop.create_task(web._run_app(web_app, port=8080))
    executor.start_polling(dp, skip_updates=True)
