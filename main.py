import os
import random
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Union
from aiohttp import web

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, ChatMemberUpdated, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ChatMemberStatus
from aiogram.filters import ChatMemberUpdatedFilter, IS_MEMBER, IS_NOT_MEMBER
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MOSCOW_TZ = pytz.timezone('Europe/Moscow')
MATTHEW_ID = int(os.environ['MATTHEW_ID'])
YANA_ID = int(os.environ['YANA_ID'])
GROUP_ID = int(os.environ['GROUP_ID'])
BOT_TOKEN = os.environ['BOT_TOKEN']

# Keep-alive —Å–µ—Ä–≤–µ—Ä
async def handle(request):
    return web.Response(text="Bot is alive")

async def keep_alive():
    app = web.Application()
    app.router.add_get('/', handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8080)
    await site.start()
    print("Keep-alive server started")

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ FireState –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
TASKS = [
    {"id": 0, "type": "message_count", "count": 10, "desc": "–Ω–∞–ø–∏—Å–∞—Ç—å 10 —Å–æ–æ–±—â–µ–Ω–∏–π"},
    {"id": 1, "type": "message_count", "count": 20, "desc": "–Ω–∞–ø–∏—Å–∞—Ç—å 20 —Å–æ–æ–±—â–µ–Ω–∏–π"},
    {"id": 2, "type": "message_count", "count": 30, "desc": "–Ω–∞–ø–∏—Å–∞—Ç—å 30 —Å–æ–æ–±—â–µ–Ω–∏–π"},
    {"id": 3, "type": "message_count", "count": 40, "desc": "–Ω–∞–ø–∏—Å–∞—Ç—å 40 —Å–æ–æ–±—â–µ–Ω–∏–π"},
    {"id": 4, "type": "message_count", "count": 50, "desc": "–Ω–∞–ø–∏—Å–∞—Ç—å 50 —Å–æ–æ–±—â–µ–Ω–∏–π"},
    {"id": 5, "type": "voice", "desc": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"},
    {"id": 6, "type": "video_note", "desc": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ—Å–æ—â—â–µ–Ω–∏–µ (–∫—Ä—É–∂–æ–∫)"},
    {"id": 7, "type": "location", "desc": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"},
    {"id": 8, "type": "video", "desc": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ"},
    {"id": 9, "type": "photo", "desc": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"},
    {"id": 10, "type": "long_text", "min_len": 50, "desc": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ >50 —Å–∏–º–≤–æ–ª–æ–≤"},
    {"id": 11, "type": "long_text", "min_len": 100, "desc": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ >100 —Å–∏–º–≤–æ–ª–æ–≤"},
    {"id": 12, "type": "sticker", "desc": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä"},
    {"id": 13, "type": "gif", "desc": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–∏—Ñ–∫—É"},
    {"id": 14, "type": "morning", "desc": "–ø–æ–∂–µ–ª–∞—Ç—å –¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞"},
    {"id": 15, "type": "evening", "desc": "–ø–æ–∂–µ–ª–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏"},
]

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
class FireState:
    def __init__(self):
        self.streak = 0
        self.status = "alive"  # alive, frozen, dead
        self.consecutive_misses = 0
        self.series_start_date: Optional[datetime] = None
        self.current_date: datetime = datetime.now(MOSCOW_TZ).date()
        self.task_indices: List[int] = []
        self.tomorrow_tasks: List[int] = []
        self.completed_tasks: Dict[int, Dict[str, bool]] = {}
        self.message_counters: Dict[int, Dict[str, int]] = {}
        self.initialize_new_day()
        
    def initialize_new_day(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è —Å –∑–∞–¥–∞–Ω–∏—è–º–∏"""
        if self.tomorrow_tasks:
            self.task_indices = self.tomorrow_tasks
            self.tomorrow_tasks = []
        else:
            self.task_indices = random.sample(range(len(TASKS)), 3)
        
        self.completed_tasks = {}
        self.message_counters = {}
        
        for idx in self.task_indices:
            task = TASKS[idx]
            self.completed_tasks[idx] = {"matthew": False, "yana": False}
            
            if task["type"] == "message_count":
                self.message_counters[idx] = {"matthew": 0, "yana": 0}
    
    def update_status(self, yesterday_success: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–≥–æ–Ω—å–∫–∞"""
        if yesterday_success:
            self.consecutive_misses = 0
            self.status = "alive"
            self.streak += 1
            if self.streak == 1:
                self.series_start_date = datetime.now(MOSCOW_TZ) - timedelta(days=1)
        else:
            self.consecutive_misses += 1
            if self.consecutive_misses >= 3:
                self.status = "dead"
                self.streak = 0
                self.series_start_date = None
            else:
                self.status = "frozen"
    
    def check_daily_completion(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π"""
        for task_idx in self.task_indices:
            task = TASKS[task_idx]
            
            for user in ["matthew", "yana"]:
                if task["type"] == "message_count":
                    if self.message_counters[task_idx][user] < task["count"]:
                        return False
                elif not self.completed_tasks[task_idx][user]:
                    return False
        return True
    
    def get_status_emoji(self) -> str:
        return {
            "alive": "üî•",
            "frozen": "üßä",
            "dead": "üò≠"
        }[self.status]
    
    def format_tasks(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π"""
        result = []
        for i, task_idx in enumerate(self.task_indices):
            task = TASKS[task_idx]
            statuses = []
            
            for user in ["matthew", "yana"]:
                if task["type"] == "message_count":
                    count = self.message_counters[task_idx][user]
                    required = task["count"]
                    status = f"{count}/{required}"
                    if count >= required:
                        status = f"‚úÖ {status}"
                else:
                    status = "‚úÖ" if self.completed_tasks[task_idx][user] else "‚ùå"
                
                statuses.append(status)
            
            result.append(
                f"{i+1}. {task['desc']} - "
                f"–ú–∞—Ç–≤–µ–π: {statuses[0]}, –Ø–Ω–∞: {statuses[1]}"
            )
        
        return "\n".join(result)
    
    def get_status_message(self) -> str:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ"""
        emoji = self.get_status_emoji()
        message = f"<b>{emoji} –°—Ç–∞—Ç—É—Å –û–≥–æ–Ω—å–∫–∞:</b>\n\n"
        
        if self.status != "dead":
            message += f"üî• –°–µ—Ä–∏—è: {self.streak} –¥–Ω–µ–π\n"
            if self.series_start_date:
                start_date = self.series_start_date.strftime("%d.%m.%Y")
                message += f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date}\n"
        
        message += "\n<b>üéØ –ó–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
        message += self.format_tasks()
        
        return message

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
fire_state = FireState()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone=MOSCOW_TZ)
user_state = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω-–º–µ–Ω—é

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_user_type(user_id: int) -> Optional[str]:
    if user_id == MATTHEW_ID:
        return "matthew"
    elif user_id == YANA_ID:
        return "yana"
    return None

def is_group_chat(message: types.Message) -> bool:
    return message.chat.id == GROUP_ID

def get_cute_name(user_type: str) -> str:
    return "–ú–∞—Ç–≤–µ–π—á–∏–∫" if user_type == "matthew" else "–Ø–Ω—á–∏–∫"

async def send_task_completion_notice(task_idx: int):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è"""
    task = TASKS[task_idx]
    statuses = []
    
    for user in ["matthew", "yana"]:
        if task["type"] == "message_count":
            count = fire_state.message_counters[task_idx][user]
            required = task["count"]
            status = f"{count}/{required}"
            if count >= required:
                status = f"‚úÖ {status}"
        else:
            status = "‚úÖ" if fire_state.completed_tasks[task_idx][user] else "‚ùå"
        
        statuses.append(status)
    
    message = (
        f"üéØ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n"
        f"<b>{task['desc']}</b>\n"
        f"–ú–∞—Ç–≤–µ–π: {statuses[0]}, –Ø–Ω–∞: {statuses[1]}"
    )
    
    await bot.send_message(
        chat_id=GROUP_ID,
        text=message,
        parse_mode="HTML"
    )

async def send_reminder():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    if fire_state.status == "frozen" and not fire_state.check_daily_completion():
        cute_matthew = get_cute_name("matthew")
        cute_yana = get_cute_name("yana")
        
        reminder_messages = [
            f"üö® {cute_matthew} –∏ {cute_yana}! –û–≥–æ–Ω—ë–∫ —Å–µ–π—á–∞—Å –Ω–µ –≥–æ—Ä–∏—Ç... "
            f"–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –æ–Ω —Å–Ω–æ–≤–∞ –∑–∞—Å–∏—è–ª! üí´",
            
            f"‚ú® –ó–¥—Ä–∞—Å—å—Ç–µ-–∑–∞–±–æ—Ä –ø–æ–∫—Ä–∞—Å—å—Ç–µ! –û–≥–æ–Ω—ë–∫ –∂–¥—ë—Ç –≤–∞—à–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è. "
            f"–ù–µ –∑–∞–±—ã–ª–∏ –ø—Ä–æ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?",
            
            f"{cute_matthew} –∏ {cute_yana}, –≤–∞—à –æ–≥–æ–Ω—ë–∫ —Å–∫—É—á–∞–µ—Ç! "
            f"–ü–æ–¥–∞—Ä–∏—Ç–µ –µ–º—É –Ω–µ–º–Ω–æ–≥–æ —Ç–µ–ø–ª–∞, –≤—ã–ø–æ–ª–Ω–∏–≤ –∑–∞–¥–∞–Ω–∏—è üî•",
            
            f"‚è∞ –¢–∏–∫-—Ç–∞–∫, –≤—Ä–µ–º—è –∏–¥—ë—Ç! –û–≥–æ–Ω—ë–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç: "
            f"—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∂–¥—É—Ç –≤–∞—à–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!",
        ]
        
        await bot.send_message(
            chat_id=GROUP_ID,
            text=random.choice(reminder_messages)
        )

async def new_day_tasks():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –≤ 00:00"""
    global fire_state
    
    yesterday_success = fire_state.check_daily_completion()
    fire_state.update_status(yesterday_success)
    fire_state.current_date = datetime.now(MOSCOW_TZ).date()
    fire_state.initialize_new_day()
    
    status_emoji = fire_state.get_status_emoji()
    message = (
        f"{status_emoji} <b>–ù–æ–≤—ã–π –¥–µ–Ω—å! –ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è!</b> {status_emoji}\n\n"
        f"{fire_state.get_status_message()}"
    )
    
    if fire_state.status == "frozen":
        cute_matthew = get_cute_name("matthew")
        cute_yana = get_cute_name("yana")
        message += (
            "\n\nüíî –û–≥–æ–Ω—ë–∫ –ø–æ—Ç—É—Å–∫–Ω–µ–ª... "
            f"{cute_matthew} –∏ {cute_yana}, —Å–µ–≥–æ–¥–Ω—è –Ω—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ "
            "–≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –æ–Ω —Å–Ω–æ–≤–∞ –∑–∞–≥–æ—Ä–µ–ª—Å—è!"
        )
    
    await bot.send_message(
        chat_id=GROUP_ID,
        text=message,
        parse_mode="HTML"
    )

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
def get_admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üìù –í—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="select_today_tasks")
    builder.button(text="üìÖ –í—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="select_tomorrow_tasks")
    builder.button(text="üî• –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–∏—é", callback_data="set_streak")
    builder.button(text="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="send_message")
    builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="refresh_status")
    builder.adjust(1)
    return builder.as_markup()

def get_task_selection_keyboard(target: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏–π"""
    builder = InlineKeyboardBuilder()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {
        "–°–æ–æ–±—â–µ–Ω–∏—è": [0, 1, 2, 3, 4, 10, 11],
        "–ú–µ–¥–∏–∞": [5, 6, 7, 8, 9, 12, 13],
        "–ü–æ–∂–µ–ª–∞–Ω–∏—è": [14, 15]
    }
    
    for category, task_ids in categories.items():
        builder.button(
            text=f"üìå {category}",
            callback_data=f"category_{target}_{'_'.join(map(str, task_ids))}"
        )
    
    builder.button(text="üé≤ –°–ª—É—á–∞–π–Ω—ã–µ 3 –∑–∞–¥–∞–Ω–∏—è", callback_data=f"random_{target}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
    builder.adjust(1)
    return builder.as_markup()

def get_tasks_from_category(category_tasks: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    task_ids = list(map(int, category_tasks.split('_')))
    builder = InlineKeyboardBuilder()
    
    for task_id in task_ids:
        task = TASKS[task_id]
        builder.button(
            text=task["desc"],
            callback_data=f"task_{task_id}"
        )
    
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_task_selection")
    builder.adjust(1)
    return builder.as_markup()

@dp.message(Command("admin"))
async def admin_panel(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin"""
    if message.from_user.id == MATTHEW_ID and message.chat.type == "private":
        user_state[message.from_user.id] = {"mode": "admin"}
        await message.answer(
            "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_admin_keyboard(),
            parse_mode="HTML"
        )

@dp.callback_query(F.data.startswith("category_"))
async def select_category(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞–Ω–∏–π"""
    if callback.from_user.id != MATTHEW_ID:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    _, target, category_tasks = callback.data.split('_', 2)
    user_state[callback.from_user.id] = {
        "mode": "select_tasks",
        "target": target,
        "selected_tasks": []
    }
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=get_tasks_from_category(category_tasks)
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("task_"))
async def select_task(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    if callback.from_user.id != MATTHEW_ID:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    task_id = int(callback.data.split('_')[1])
    user_state[callback.from_user.id]["selected_tasks"].append(task_id)
    
    if len(user_state[callback.from_user.id]["selected_tasks"]) >= 3:
        target = user_state[callback.from_user.id]["target"]
        
        if target == "today":
            fire_state.task_indices = user_state[callback.from_user.id]["selected_tasks"][:3]
            fire_state.initialize_new_day()
            await callback.message.edit_text(
                "‚úÖ –ó–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n" + fire_state.get_status_message(),
                parse_mode="HTML"
            )
        else:
            fire_state.tomorrow_tasks = user_state[callback.from_user.id]["selected_tasks"][:3]
            tasks_list = "\n".join([f"‚Ä¢ {TASKS[idx]['desc']}" for idx in fire_state.tomorrow_tasks])
            await callback.message.edit_text(
                f"‚úÖ –ó–∞–¥–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:\n{tasks_list}",
                parse_mode="HTML"
            )
        
        user_state[callback.from_user.id] = {"mode": "admin"}
    else:
        await callback.answer(f"–í—ã–±—Ä–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: {TASKS[task_id]['desc']}")

@dp.callback_query(F.data.startswith("random_"))
async def select_random_tasks(callback: CallbackQuery):
    """–í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""
    if callback.from_user.id != MATTHEW_ID:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    target = callback.data.split('_')[1]
    
    if target == "today":
        fire_state.task_indices = random.sample(range(len(TASKS)), 3)
        fire_state.initialize_new_day()
        await callback.message.edit_text(
            "üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n" + fire_state.get_status_message(),
            parse_mode="HTML"
        )
    else:
        fire_state.tomorrow_tasks = random.sample(range(len(TASKS)), 3)
        tasks_list = "\n".join([f"‚Ä¢ {TASKS[idx]['desc']}" for idx in fire_state.tomorrow_tasks])
        await callback.message.edit_text(
            f"üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n{tasks_list}",
            parse_mode="HTML"
        )
    
    await callback.answer()

@dp.callback_query(F.data == "select_today_tasks")
async def select_today_tasks(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    if callback.from_user.id != MATTHEW_ID:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    user_state[callback.from_user.id] = {
        "mode": "select_tasks",
        "target": "today",
        "selected_tasks": []
    }
    
    await callback.message.edit_text(
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ 3 –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:",
        reply_markup=get_task_selection_keyboard("today")
    )
    await callback.answer()

@dp.callback_query(F.data == "select_tomorrow_tasks")
async def select_tomorrow_tasks(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    if callback.from_user.id != MATTHEW_ID:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    user_state[callback.from_user.id] = {
        "mode": "select_tasks",
        "target": "tomorrow",
        "selected_tasks": []
    }
    
    await callback.message.edit_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ 3 –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞:",
        reply_markup=get_task_selection_keyboard("tomorrow")
    )
    await callback.answer()

@dp.callback_query(F.data == "set_streak")
async def set_streak(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–∏–∏"""
    if callback.from_user.id != MATTHEW_ID:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    user_state[callback.from_user.id] = {"mode": "set_streak"}
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏–Ω—É —Å–µ—Ä–∏–∏ (—á–∏—Å–ª–æ –¥–Ω–µ–π):"
    )
    await callback.answer()

@dp.callback_query(F.data == "send_message")
async def prepare_send_message(callback: CallbackQuery):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if callback.from_user.id != MATTHEW_ID:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    user_state[callback.from_user.id] = {"mode": "send_message"}
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤ –≥—Ä—É–ø–ø—É:"
    )
    await callback.answer()

@dp.callback_query(F.data == "refresh_status")
async def refresh_status(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
    if callback.from_user.id != MATTHEW_ID:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await callback.message.edit_text(
        fire_state.get_status_message(),
        parse_mode="HTML"
    )
    await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω")

@dp.callback_query(F.data == "back_to_admin")
async def back_to_admin(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if callback.from_user.id != MATTHEW_ID:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    user_state[callback.from_user.id] = {"mode": "admin"}
    await callback.message.edit_text(
        "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == "back_to_task_selection")
async def back_to_task_selection(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∑–∞–¥–∞–Ω–∏–π"""
    if callback.from_user.id != MATTHEW_ID:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    target = user_state[callback.from_user.id]["target"]
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ {'—Å–µ–≥–æ–¥–Ω—è' if target == 'today' else '–∑–∞–≤—Ç—Ä–∞'}:",
        reply_markup=get_task_selection_keyboard(target)
    )
    await callback.answer()

@dp.message(F.chat.type == "private", F.from_user.id == MATTHEW_ID)
async def handle_admin_commands(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞"""
    user_id = message.from_user.id
    
    if user_id not in user_state:
        return
    
    if user_state[user_id].get("mode") == "set_streak":
        try:
            new_streak = int(message.text)
            fire_state.streak = new_streak
            fire_state.series_start_date = datetime.now(MOSCOW_TZ) - timedelta(days=new_streak)
            fire_state.status = "alive"
            fire_state.consecutive_misses = 0
            
            await message.answer(
                f"‚úÖ –°–µ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {new_streak} –¥–Ω–µ–π\n\n"
                f"{fire_state.get_status_message()}",
                parse_mode="HTML"
            )
            user_state[user_id] = {"mode": "admin"}
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    
    elif user_state[user_id].get("mode") == "send_message":
        await bot.send_message(
            chat_id=GROUP_ID,
            text=message.text
        )
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É")
        user_state[user_id] = {"mode": "admin"}

# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    if is_group_chat(message):
        await message.reply(
            "–ü—Ä–∏–≤–µ—Ç! –Ø - –û–≥–æ–Ω—ë–∫! "
            "–ù–∞–ø–∏—à–∏—Ç–µ !–æ–≥–æ–Ω–µ–∫ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å."
        )
    elif message.from_user.id == MATTHEW_ID:
        await admin_panel(message)

@dp.message(F.text == "!–æ–≥–æ–Ω–µ–∫")
async def fire_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã !–æ–≥–æ–Ω–µ–∫"""
    if is_group_chat(message):
        await message.reply(
            fire_state.get_status_message(),
            parse_mode="HTML"
        )

@dp.message(F.chat.id == GROUP_ID)
async def handle_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ"""
    user_type = get_user_type(message.from_user.id)
    if not user_type:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è
    for task_idx in fire_state.task_indices:
        task = TASKS[task_idx]
        was_completed = fire_state.completed_tasks[task_idx][user_type]
        
        # –ü–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        if task["type"] == "message_count":
            fire_state.message_counters[task_idx][user_type] += 1
        
        # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif task["type"] == "voice" and message.voice:
            fire_state.completed_tasks[task_idx][user_type] = True
        
        # –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä—É–∂–∫–∏)
        elif task["type"] == "video_note" and message.video_note:
            fire_state.completed_tasks[task_idx][user_type] = True
        
        # –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
        elif task["type"] == "location" and message.location:
            fire_state.completed_tasks[task_idx][user_type] = True
        
        # –í–∏–¥–µ–æ
        elif task["type"] == "video" and message.video:
            fire_state.completed_tasks[task_idx][user_type] = True
        
        # –§–æ—Ç–æ
        elif task["type"] == "photo" and message.photo:
            fire_state.completed_tasks[task_idx][user_type] = True
        
        # –î–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif task["type"] == "long_text" and message.text:
            if len(message.text) >= task["min_len"]:
                fire_state.completed_tasks[task_idx][user_type] = True
        
        # –°—Ç–∏–∫–µ—Ä—ã
        elif task["type"] == "sticker" and message.sticker:
            fire_state.completed_tasks[task_idx][user_type] = True
        
        # GIF
        elif task["type"] == "gif" and message.animation:
            fire_state.completed_tasks[task_idx][user_type] = True
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —É—Ç—Ä–æ–º
        elif task["type"] == "morning" and message.text:
            text = message.text.lower()
            phrases = ["–¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–µ—á–∫–æ", "–¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–µ—á–∫–∞"]
            if any(phrase in text for phrase in phrases):
                fire_state.completed_tasks[task_idx][user_type] = True
        
        # –ü–æ–∂–µ–ª–∞–Ω–∏—è —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏
        elif task["type"] == "evening" and message.text:
            text = message.text.lower()
            phrases = ["—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏", "—Å–ø–æ–∫", "—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∫–∏", "—Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤"]
            if any(phrase in text for phrase in phrases):
                fire_state.completed_tasks[task_idx][user_type] = True
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è
        if not was_completed and fire_state.completed_tasks[task_idx][user_type]:
            await send_task_completion_notice(task_idx)

@dp.chat_member(ChatMemberUpdatedFilter(IS_NOT_MEMBER >> IS_MEMBER))
async def on_user_join(event: ChatMemberUpdated):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ø–Ω—ã –≤ –≥—Ä—É–ø–ø—É"""
    if event.chat.id == GROUP_ID and event.new_chat_member.user.id == YANA_ID:
        await bot.send_message(
            chat_id=GROUP_ID,
            text=(
                f"–ü—Ä–∏–≤–µ—Ç, –Ø–Ω–∞! –Ø - –û–≥–æ–Ω—ë–∫, –æ–±—â–∞–π—Å—è —Å –ú–∞—Ç–≤–µ–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, "
                f"—á—Ç–æ–±—ã —è –ø—Ä–æ–¥–æ–ª–∂–∞–ª –≥–æ—Ä–µ—Ç—å.\n\n{fire_state.get_status_message()}"
            ),
            parse_mode="HTML"
        )


async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive —Å–µ—Ä–≤–µ—Ä
    asyncio.create_task(keep_alive())
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler.add_job(
        new_day_tasks,
        CronTrigger(hour=0, minute=0, timezone=MOSCOW_TZ)
    )
    
    for hour in [10, 14, 18, 22]:
        scheduler.add_job(
            send_reminder,
            CronTrigger(hour=hour, minute=0, timezone=MOSCOW_TZ)
        )
    
    scheduler.start()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
