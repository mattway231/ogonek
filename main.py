# main.py
import logging
import random
import datetime
import json
import re
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)

BOT_TOKEN = "8215048455:AAHo0yQazQdG93cvlDuhjn67VT-OUt7I9VM"  # üîÅ –£–∫–∞–∂–∏ —Å–≤–æ–π –Ω–∞—Å—Ç–æ—è—â–∏–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TASKS = [
    "–Ω–∞–ø–∏—Å–∞—Ç—å 10 —Å–æ–æ–±—â–µ–Ω–∏–π", "–Ω–∞–ø–∏—Å–∞—Ç—å 20 —Å–æ–æ–±—â–µ–Ω–∏–π", "–Ω–∞–ø–∏—Å–∞—Ç—å 30 —Å–æ–æ–±—â–µ–Ω–∏–π",
    "–Ω–∞–ø–∏—Å–∞—Ç—å 40 —Å–æ–æ–±—â–µ–Ω–∏–π", "–Ω–∞–ø–∏—Å–∞—Ç—å 50 —Å–æ–æ–±—â–µ–Ω–∏–π", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
    "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ (–∫—Ä—É–∂–æ–∫)", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é",
    "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ >50 —Å–∏–º–≤–æ–ª–æ–≤",
    "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ >100 —Å–∏–º–≤–æ–ª–æ–≤", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–∏—Ñ–∫—É",
    "–ø–æ–∂–µ–ª–∞—Ç—å –¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞", "–ø–æ–∂–µ–ª–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏"
]

MORNING_PHRASES = ["–¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–µ—á–∫–æ", "–¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–µ—á–∫–∞"]
NIGHT_PHRASES = ["—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏", "—Å–ø–æ–∫", "—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∫–∏", "—Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤"]

STATE_FILE = "state.json"

def load_state():
    try:
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_state(state):
    with open(STATE_FILE, "w", encoding="utf-8") as f:
        json.dump(state, f, ensure_ascii=False, indent=2)

def start_fire(chat_id, state):
    state[str(chat_id)] = {
        "started": datetime.date.today().isoformat(),
        "day": 0,
        "status": "üî•",
        "missed": 0,
        "tasks": [],
        "last_date": None,
        "completed_tasks": {"me": [], "them": []},
        "message_count": {"me": 0, "them": 0}
    }

def next_day(chat_id, state):
    info = state[str(chat_id)]
    info["day"] += 1
    info["tasks"] = random.sample(TASKS, 3)
    info["completed_tasks"] = {"me": [], "them": []}
    info["message_count"] = {"me": 0, "them": 0}

def check_failure(chat_id, state):
    info = state[str(chat_id)]
    me_done = len(info["completed_tasks"]["me"]) >= 1
    them_done = len(info["completed_tasks"]["them"]) >= 1

    if not me_done or not them_done:
        info["missed"] += 1
        if info["status"] == "üî•":
            info["status"] = "üßä"

    if info["missed"] >= 3:
        info["status"] = "üò≠"

# ‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
async def send_new_tasks(context: ContextTypes.DEFAULT_TYPE):
    state = load_state()
    today = datetime.date.today().isoformat()

    for chat_id, info in state.items():
        if info["status"] == "üò≠":
            continue

        if info.get("last_date") != today:
            check_failure(chat_id, state)
            next_day(chat_id, state)
            info["last_date"] = today

            tasks = info["tasks"]
            text = (
                f"üî• –ø—Ä–∏–≤–µ—Ç! —è - –û–≥–æ–Ω—ë–∫. –æ–±—â–∞–π—Å—è —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã —è –ø—Ä–æ–¥–æ–ª–∂–∞–ª –≥–æ—Ä–µ—Ç—å.\n\n"
                f"–∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n‚Ä¢ " + "\n‚Ä¢ ".join(tasks) + "\n\n"
                "–µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ –≤–∞—Å –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç –∑–∞–¥–∞–Ω–∏–µ, –æ–≥–æ–Ω—ë–∫ —Å—Ç–∞–Ω–µ—Ç —Å–µ—Ä—ã–º.\n"
                "3 –¥–Ω—è –ø–æ–¥—Ä—è–¥ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî –æ–≥–æ–Ω—ë–∫ –ø–æ—Ç—É—Ö–Ω–µ—Ç."
            )
            await context.bot.send_message(chat_id=int(chat_id), text=text)

    save_state(state)

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
def is_task_done(task: str, msg: Update.message, who: str, info) -> bool:
    if task.startswith("–Ω–∞–ø–∏—Å–∞—Ç—å"):
        match = re.search(r"–Ω–∞–ø–∏—Å–∞—Ç—å (\d+) —Å–æ–æ–±—â–µ–Ω–∏–π", task)
        if match:
            required = int(match.group(1))
            return info["message_count"][who] >= required
    if task == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" and msg.voice:
        return True
    if task == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ (–∫—Ä—É–∂–æ–∫)" and msg.video_note:
        return True
    if task == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é" and msg.location:
        return True
    if task == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ" and msg.video:
        return True
    if task == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ" and msg.photo:
        return True
    if task == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ >50 —Å–∏–º–≤–æ–ª–æ–≤" and msg.text and len(msg.text) > 50:
        return True
    if task == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ >100 —Å–∏–º–≤–æ–ª–æ–≤" and msg.text and len(msg.text) > 100:
        return True
    if task == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä" and msg.sticker:
        return True
    if task == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–∏—Ñ–∫—É" and msg.animation:
        return True
    if task == "–ø–æ–∂–µ–ª–∞—Ç—å –¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞" and msg.text and any(p in msg.text.lower() for p in MORNING_PHRASES):
        return True
    if task == "–ø–æ–∂–µ–ª–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏" and msg.text and any(p in msg.text.lower() for p in NIGHT_PHRASES):
        return True
    return False

# üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not msg.chat or not msg.from_user:
        return

    chat_id = str(msg.chat_id)
    sender_id = msg.from_user.id
    state = load_state()
    info = state.get(chat_id)

    if not info:
        start_fire(chat_id, state)
        info = state[chat_id]
        await msg.reply_text(
            "–ø—Ä–∏–≤–µ—Ç! —è - –û–≥–æ–Ω—ë–∫. –∑–∞–¥–∞–Ω–∏—è –±—É–¥—É—Ç –≤—ã–¥–∞–Ω—ã –≤ –ø–æ–ª–Ω–æ—á—å –ø–æ –ú–°–ö.\n"
            "–≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –∏—Ö –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤–¥–≤–æ—ë–º, —á—Ç–æ–±—ã –û–≥–æ–Ω—ë–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–ª –≥–æ—Ä–µ—Ç—å!"
        )
        save_state(state)
        return

    # –ö–æ–º–∞–Ω–¥–∞ "!–æ–≥–æ–Ω–µ–∫"
    if msg.text and msg.text.strip() == "!–æ–≥–æ–Ω–µ–∫":
        tasks = info.get("tasks", [])
        done_me = len(info["completed_tasks"]["me"]) >= 1
        done_them = len(info["completed_tasks"]["them"]) >= 1
        await msg.reply_text(
            f"üî• —Å–µ—Ä–∏—è –æ–≥–æ–Ω—å–∫–∞\n"
            f"—Å—Ç–∞—Ç—É—Å: {info['status']}\n"
            f"–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {info['started']}\n"
            f"–¥–µ–Ω—å: {info['day']}\n"
            f"–∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n‚Ä¢ " + "\n‚Ä¢ ".join(tasks) + "\n\n"
            f"–≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {'‚úÖ' if done_me else '‚ùå'} –≤—ã, {'‚úÖ' if done_them else '‚ùå'} —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫"
        )
        return

    who = "me" if sender_id == context.bot.id else "them"
    info["message_count"][who] += 1

    new_done = False
    for task in info.get("tasks", []):
        if task in info["completed_tasks"][who]:
            continue
        if is_task_done(task, msg, who, info):
            info["completed_tasks"][who].append(task)
            new_done = True

    if new_done:
        await msg.reply_text(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –û–≥–æ–Ω—ë–∫ —Ä–∞–∑–≥–æ—Ä–∞–µ—Ç—Å—è üî•")

    save_state(state)

# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(MessageHandler(filters.ALL, handle_message))

    app.job_queue.run_daily(
        send_new_tasks,
        time=datetime.time(hour=0, minute=0, tzinfo=datetime.timezone(datetime.timedelta(hours=3)))
    )

    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
