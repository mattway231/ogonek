import os
import random
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, ChatMemberUpdated
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ChatMemberStatus
from aiogram.filters import ChatMemberUpdatedFilter, IS_MEMBER, IS_NOT_MEMBER
from aiogram.utils.chat_action import ChatActionMiddleware
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MOSCOW_TZ = pytz.timezone('Europe/Moscow')
MATTHEW_ID = int(os.environ['MATTHEW_ID'])
YANA_ID = int(os.environ['YANA_ID'])
GROUP_ID = int(os.environ['GROUP_ID'])
BOT_TOKEN = os.environ['BOT_TOKEN']

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
TASKS = [
    {"type": "message_count", "count": 10, "desc": "–Ω–∞–ø–∏—Å–∞—Ç—å 10 —Å–æ–æ–±—â–µ–Ω–∏–π"},
    {"type": "message_count", "count": 20, "desc": "–Ω–∞–ø–∏—Å–∞—Ç—å 20 —Å–æ–æ–±—â–µ–Ω–∏–π"},
    {"type": "message_count", "count": 30, "desc": "–Ω–∞–ø–∏—Å–∞—Ç—å 30 —Å–æ–æ–±—â–µ–Ω–∏–π"},
    {"type": "message_count", "count": 40, "desc": "–Ω–∞–ø–∏—Å–∞—Ç—å 40 —Å–æ–æ–±—â–µ–Ω–∏–π"},
    {"type": "message_count", "count": 50, "desc": "–Ω–∞–ø–∏—Å–∞—Ç—å 50 —Å–æ–æ–±—â–µ–Ω–∏–π"},
    {"type": "voice", "desc": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"},
    {"type": "video_note", "desc": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ—Å–æ—â—â–µ–Ω–∏–µ (–∫—Ä—É–∂–æ–∫)"},
    {"type": "location", "desc": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"},
    {"type": "video", "desc": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ"},
    {"type": "photo", "desc": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"},
    {"type": "long_text", "min_len": 50, "desc": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ >50 —Å–∏–º–≤–æ–ª–æ–≤"},
    {"type": "long_text", "min_len": 100, "desc": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ >100 —Å–∏–º–≤–æ–ª–æ–≤"},
    {"type": "sticker", "desc": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä"},
    {"type": "gif", "desc": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–∏—Ñ–∫—É"},
    {"type": "morning", "desc": "–ø–æ–∂–µ–ª–∞—Ç—å –¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞"},
    {"type": "evening", "desc": "–ø–æ–∂–µ–ª–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏"},
]

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
class FireState:
    def __init__(self):
        self.streak = 0
        self.status = "alive"  # alive, frozen, dead
        self.consecutive_misses = 0
        self.series_start_date: Optional[datetime] = None
        self.current_date: datetime = datetime.now(MOSCOW_TZ).date()
        self.task_indices: List[int] = []
        self.completed_tasks: Dict[int, Dict[str, bool]] = {}
        self.message_counters: Dict[int, Dict[str, int]] = {}
        self.initialize_new_day()
        
    def initialize_new_day(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è –∏ –∑–∞–¥–∞–Ω–∏–π"""
        self.task_indices = random.sample(range(len(TASKS)), 3)
        self.completed_tasks = {}
        self.message_counters = {}
        
        for idx in self.task_indices:
            task = TASKS[idx]
            self.completed_tasks[idx] = {"matthew": False, "yana": False}
            
            if task["type"] == "message_count":
                self.message_counters[idx] = {"matthew": 0, "yana": 0}
    
    def update_status(self, yesterday_success: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–≥–æ–Ω—å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π"""
        if yesterday_success:
            self.consecutive_misses = 0
            self.status = "alive"
            self.streak += 1
            if self.streak == 1:
                self.series_start_date = datetime.now(MOSCOW_TZ) - timedelta(days=1)
        else:
            self.consecutive_misses += 1
            if self.consecutive_misses >= 3:
                self.status = "dead"
                self.streak = 0
                self.series_start_date = None
            else:
                self.status = "frozen"
    
    def check_daily_completion(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å"""
        for task_idx in self.task_indices:
            task = TASKS[task_idx]
            
            for user in ["matthew", "yana"]:
                if task["type"] == "message_count":
                    if self.message_counters[task_idx][user] < task["count"]:
                        return False
                elif not self.completed_tasks[task_idx][user]:
                    return False
        return True
    
    def get_status_emoji(self) -> str:
        return {
            "alive": "üî•",
            "frozen": "üßä",
            "dead": "üò≠"
        }[self.status]
    
    def format_tasks(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞"""
        result = []
        for i, task_idx in enumerate(self.task_indices):
            task = TASKS[task_idx]
            statuses = []
            
            for user in ["matthew", "yana"]:
                if task["type"] == "message_count":
                    count = self.message_counters[task_idx][user]
                    required = task["count"]
                    status = f"{count}/{required}"
                    if count >= required:
                        status = f"‚úÖ {status}"
                else:
                    status = "‚úÖ" if self.completed_tasks[task_idx][user] else "‚ùå"
                
                statuses.append(status)
            
            result.append(
                f"{i+1}. {task['desc']} - "
                f"–ú–∞—Ç–≤–µ–π: {statuses[0]}, –Ø–Ω–∞: {statuses[1]}"
            )
        
        return "\n".join(result)
    
    def get_status_message(self) -> str:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ"""
        emoji = self.get_status_emoji()
        message = f"<b>{emoji} –°—Ç–∞—Ç—É—Å –û–≥–æ–Ω—å–∫–∞:</b>\n\n"
        
        if self.status != "dead":
            message += f"üî• –°–µ—Ä–∏—è: {self.streak} –¥–Ω–µ–π\n"
            if self.series_start_date:
                start_date = self.series_start_date.strftime("%d.%m.%Y")
                message += f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date}\n"
        
        message += "\n<b>üéØ –ó–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
        message += self.format_tasks()
        
        return message

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
fire_state = FireState()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone=MOSCOW_TZ)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_user_type(user_id: int) -> Optional[str]:
    if user_id == MATTHEW_ID:
        return "matthew"
    elif user_id == YANA_ID:
        return "yana"
    return None

def is_group_chat(message: types.Message) -> bool:
    return message.chat.id == GROUP_ID

def get_cute_name(user_type: str) -> str:
    return "–ú–∞—Ç–≤–µ–π–∫–∞" if user_type == "matthew" else "–Ø–Ω—á–∏–∫"

async def send_reminder():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–∞–Ω–∏—è—Ö"""
    if fire_state.status == "frozen" and not fire_state.check_daily_completion():
        cute_matthew = get_cute_name("matthew")
        cute_yana = get_cute_name("yana")
        
        reminder_messages = [
            f"üö® {cute_matthew} –∏ {cute_yana}! –û–≥–æ–Ω—ë–∫ —Å–µ–π—á–∞—Å –Ω–µ –≥–æ—Ä–∏—Ç... "
            f"–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –æ–Ω —Å–Ω–æ–≤–∞ –∑–∞—Å–∏—è–ª! üí´",
            
            f"‚ú® –ü—Ä–∏–≤–µ—Ç! –û–≥–æ–Ω—ë–∫ –∂–¥—ë—Ç –≤–∞—à–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è. "
            f"–ù–µ –∑–∞–±—ã–ª–∏ –ø—Ä–æ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?",
            
            f"{cute_matthew} –∏ {cute_yana}, –≤–∞—à –æ–≥–æ–Ω—ë–∫ —Å–∫—É—á–∞–µ—Ç! "
            f"–ü–æ–¥–∞—Ä–∏—Ç–µ –µ–º—É –Ω–µ–º–Ω–æ–≥–æ —Ç–µ–ø–ª–∞, –≤—ã–ø–æ–ª–Ω–∏–≤ –∑–∞–¥–∞–Ω–∏—è üî•",
            
            f"‚è∞ –¢–∏–∫-—Ç–∞–∫, –≤—Ä–µ–º—è –∏–¥—ë—Ç! –û–≥–æ–Ω—ë–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç: "
            f"—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∂–¥—É—Ç –≤–∞—à–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!",
        ]
        
        await bot.send_message(
            chat_id=GROUP_ID,
            text=random.choice(reminder_messages)
        )

async def new_day_tasks():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –≤ 00:00 –ø–æ –ú–°–ö"""
    global fire_state
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—á–µ—Ä–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
    yesterday_success = fire_state.check_daily_completion()
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    fire_state.update_status(yesterday_success)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è
    fire_state.current_date = datetime.now(MOSCOW_TZ).date()
    fire_state.initialize_new_day()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    status_emoji = fire_state.get_status_emoji()
    message = (
        f"{status_emoji} <b>–ù–æ–≤—ã–π –¥–µ–Ω—å! –ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è!</b> {status_emoji}\n\n"
        f"{fire_state.get_status_message()}"
    )
    
    if fire_state.status == "frozen":
        cute_matthew = get_cute_name("matthew")
        cute_yana = get_cute_name("yana")
        message += (
            "\n\nüíî –û–≥–æ–Ω—ë–∫ –ø–æ—Ç—É—Å–∫–Ω–µ–ª... "
            f"{cute_matthew} –∏ {cute_yana}, —Å–µ–≥–æ–¥–Ω—è –Ω—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ "
            "–≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –æ–Ω —Å–Ω–æ–≤–∞ –∑–∞–≥–æ—Ä–µ–ª—Å—è!"
        )
    
    await bot.send_message(
        chat_id=GROUP_ID,
        text=message,
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    if is_group_chat(message):
        await message.reply(
            "–ü—Ä–∏–≤–µ—Ç! –Ø - –û–≥–æ–Ω—ë–∫! "
            "–ù–∞–ø–∏—à–∏—Ç–µ !–æ–≥–æ–Ω–µ–∫ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å."
        )

@dp.message(F.text == "!–æ–≥–æ–Ω–µ–∫")
async def fire_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã !–æ–≥–æ–Ω–µ–∫"""
    if is_group_chat(message):
        await message.reply(
            fire_state.get_status_message(),
            parse_mode="HTML"
        )

@dp.message(F.chat.id == GROUP_ID)
async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ"""
    user_type = get_user_type(message.from_user.id)
    if not user_type:
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π
    for task_idx in fire_state.task_indices:
        task = TASKS[task_idx]
        
        # –ü–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        if task["type"] == "message_count":
            fire_state.message_counters[task_idx][user_type] += 1
        
        # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif task["type"] == "voice" and message.voice:
            fire_state.completed_tasks[task_idx][user_type] = True
        
        # –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä—É–∂–∫–∏)
        elif task["type"] == "video_note" and message.video_note:
            fire_state.completed_tasks[task_idx][user_type] = True
        
        # –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
        elif task["type"] == "location" and message.location:
            fire_state.completed_tasks[task_idx][user_type] = True
        
        # –í–∏–¥–µ–æ
        elif task["type"] == "video" and message.video:
            fire_state.completed_tasks[task_idx][user_type] = True
        
        # –§–æ—Ç–æ
        elif task["type"] == "photo" and message.photo:
            fire_state.completed_tasks[task_idx][user_type] = True
        
        # –î–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif task["type"] == "long_text" and message.text:
            if len(message.text) >= task["min_len"]:
                fire_state.completed_tasks[task_idx][user_type] = True
        
        # –°—Ç–∏–∫–µ—Ä—ã
        elif task["type"] == "sticker" and message.sticker:
            fire_state.completed_tasks[task_idx][user_type] = True
        
        # GIF
        elif task["type"] == "gif" and message.animation:
            fire_state.completed_tasks[task_idx][user_type] = True
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —É—Ç—Ä–æ–º
        elif task["type"] == "morning" and message.text:
            text = message.text.lower()
            phrases = ["–¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–µ—á–∫–æ", "–¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–µ—á–∫–∞"]
            if any(phrase in text for phrase in phrases):
                fire_state.completed_tasks[task_idx][user_type] = True
        
        # –ü–æ–∂–µ–ª–∞–Ω–∏—è —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏
        elif task["type"] == "evening" and message.text:
            text = message.text.lower()
            phrases = ["—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏", "—Å–ø–æ–∫", "—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∫–∏", "—Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤"]
            if any(phrase in text for phrase in phrases):
                fire_state.completed_tasks[task_idx][user_type] = True

@dp.chat_member(ChatMemberUpdatedFilter(IS_NOT_MEMBER >> IS_MEMBER))
async def on_user_join(event: ChatMemberUpdated):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ø–Ω—ã –≤ –≥—Ä—É–ø–ø—É"""
    if event.chat.id == GROUP_ID and event.new_chat_member.user.id == YANA_ID:
        await bot.send_message(
            chat_id=GROUP_ID,
            text=(
                f"–ü—Ä–∏–≤–µ—Ç, –Ø–Ω–∞! –Ø - –û–≥–æ–Ω—ë–∫, –æ–±—â–∞–π—Å—è —Å –ú–∞—Ç–≤–µ–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, "
                f"—á—Ç–æ–±—ã —è –ø—Ä–æ–¥–æ–ª–∂–∞–ª –≥–æ—Ä–µ—Ç—å.\n\n{fire_state.get_status_message()}"
                f"(–ø–∏—à—É —Ç–µ–±–µ —á–µ—Ä–µ–∑ –∫–æ–¥, –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç —ç—Ç–æ —Ç–µ–±–µ –∫–æ–≥–¥–∞"
                f"—Ç—ã –∑–∞–π–¥–µ—à—å –≤ –≥—Ä—É–ø–ø—É, —ç—Ç–∞ –≥—Ä—É–ø–ø–∞ —ç—Ç–æ –∑–∞–º–µ–Ω–∞ –Ω–∞—à–µ–≥–æ –ª—Å, –Ω–æ —Ç–æ–ª—å–∫–æ —Å"
                f"–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∞—Ö–∞—Ö)"
            ),
            parse_mode="HTML"
        )

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler.add_job(
        new_day_tasks,
        CronTrigger(hour=0, minute=0, timezone=MOSCOW_TZ)
    )
    
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è 4 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å
    for hour in [10, 14, 18, 22]:
        scheduler.add_job(
            send_reminder,
            CronTrigger(hour=hour, minute=0, timezone=MOSCOW_TZ)
        )
    
    scheduler.start()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
